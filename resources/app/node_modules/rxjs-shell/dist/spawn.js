"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.spawn = void 0;
const child_process_1 = require("child_process");
const rxjs_1 = require("rxjs");
const util_1 = require("./util");
function spawn(command, args, options, procCallback) {
    return new rxjs_1.Observable((subscriber) => {
        const proc = (0, child_process_1.spawn)(command, args ? args.map(String) : [], options);
        const stdouts = [];
        const stderrs = [];
        if (proc.stdout) {
            proc.stdout.on('data', chunk => {
                stdouts.push(chunk);
                subscriber.next({ type: 'stdout', chunk });
            });
        }
        if (proc.stderr) {
            proc.stderr.on('data', chunk => {
                stderrs.push(chunk);
                subscriber.next({ type: 'stderr', chunk });
            });
        }
        proc.on('error', err => {
            process.exitCode = 1;
            subscriber.error(new util_1.ShellError('process exited with an error', err, Buffer.concat(stdouts), Buffer.concat(stderrs)));
        });
        proc.on('close', (code, signal) => {
            if (code > 0) {
                process.exitCode = code;
                subscriber.error(new util_1.ShellError(`process exited with code ${code}`, { code, signal }, Buffer.concat(stdouts), Buffer.concat(stderrs)));
                return;
            }
            subscriber.complete();
        });
        const removeEvents = (0, util_1.listenTerminating)(() => subscriber.complete());
        if (procCallback) {
            procCallback(proc);
        }
        return () => {
            (0, util_1.killProc)(proc);
            removeEvents();
        };
    });
}
exports.spawn = spawn;
//# sourceMappingURL=spawn.js.map