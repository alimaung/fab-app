// @generated by protoc-gen-es v1.9.0
// @generated from file device.proto (package device, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * *
 * The DeviceMessageTypeV1 enum contains the message type identifer
 * values for the messages used in this "device.proto" protocol
 * definition. View the "iot.proto" for valid values of message types.
 *
 * @generated from enum device.DeviceMessageTypeV1
 */
export const DeviceMessageTypeV1 = /*@__PURE__*/ proto3.makeEnum(
  "device.DeviceMessageTypeV1",
  [
    {no: 0, name: "DEVICE_MESSAGE_TYPE_V1_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "DEVICE_MESSAGE_TYPE_V1_GATEWAY_DATA", localName: "GATEWAY_DATA"},
    {no: 16, name: "DEVICE_MESSAGE_TYPE_V1_ERROR_RESPONSE", localName: "ERROR_RESPONSE"},
    {no: 17, name: "DEVICE_MESSAGE_TYPE_V1_GATEWAY_LIVE_DATA", localName: "GATEWAY_LIVE_DATA"},
    {no: 18, name: "DEVICE_MESSAGE_TYPE_V1_GATEWAY_DEBUG_DATA", localName: "GATEWAY_DEBUG_DATA"},
    {no: 19, name: "DEVICE_MESSAGE_TYPE_V1_GATEWAY_COMMAND_REQUEST", localName: "GATEWAY_COMMAND_REQUEST"},
    {no: 20, name: "DEVICE_MESSAGE_TYPE_V1_GATEWAY_COMMAND_RESPONSE", localName: "GATEWAY_COMMAND_RESPONSE"},
  ],
);

/**
 * *
 * Commands which are used by the backend to initiate
 * workflows or execute actions performed by the device.
 *
 * @generated from enum device.DeviceCommandV1
 */
export const DeviceCommandV1 = /*@__PURE__*/ proto3.makeEnum(
  "device.DeviceCommandV1",
  [
    {no: 0, name: "DEVICE_COMMAND_V1_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "DEVICE_COMMAND_V1_SYNCHRONIZE_STATUS", localName: "SYNCHRONIZE_STATUS"},
    {no: 2, name: "DEVICE_COMMAND_V1_UPDATE_FIRMWARE", localName: "UPDATE_FIRMWARE"},
    {no: 3, name: "DEVICE_COMMAND_V1_UPDATE_CONFIGURATION", localName: "UPDATE_CONFIGURATION"},
    {no: 4, name: "DEVICE_COMMAND_V1_REBOOT", localName: "REBOOT"},
    {no: 5, name: "DEVICE_COMMAND_V1_SET_DATA_MODE_LIVE_ON", localName: "SET_DATA_MODE_LIVE_ON"},
    {no: 6, name: "DEVICE_COMMAND_V1_SET_DATA_MODE_LIVE_OFF", localName: "SET_DATA_MODE_LIVE_OFF"},
    {no: 7, name: "DEVICE_COMMAND_V1_SET_DATA_MODE_DEBUG_ON", localName: "SET_DATA_MODE_DEBUG_ON"},
    {no: 8, name: "DEVICE_COMMAND_V1_SET_DATA_MODE_DEBUG_OFF", localName: "SET_DATA_MODE_DEBUG_OFF"},
    {no: 9, name: "DEVICE_COMMAND_V1_SET_MSG_TRACE_ON", localName: "SET_MSG_TRACE_ON"},
    {no: 10, name: "DEVICE_COMMAND_V1_SET_MSG_TRACE_OFF", localName: "SET_MSG_TRACE_OFF"},
  ],
);

/**
 * *
 * Unique identifier for a device represented in the form
 * of product code and serial number.
 *
 * Other forms of representation for this unique identifier are:
 * - ProductSerialId:
 *   A 64 bit integer number with the product code being the upper
 *   32 bit and the serial number being the lower 32 bit.
 * - ProductSerial:
 *   A string representation of the ProductSerialId using a
 *   base34 character conversion based on the character set
 *   `0123456789ABCDEFGHJKLMNPQRSTUVWXYZ`. The result is
 *   padded with 0 to 14 characters.
 *
 * @generated from message device.DeviceIdentifier
 */
export const DeviceIdentifier = /*@__PURE__*/ proto3.makeMessageType(
  "device.DeviceIdentifier",
  () => [
    { no: 1, name: "product_code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "serial_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * *
 * Request message header for use in device request messages.
 * Requests are sent by a device to the backend. The backend
 * responds with a response.
 *
 * The device request header is set depending on the underlying
 * transport or storage protocol. For example, when this message
 * is sent via MQTT, the MQTT topic is structured in a way to
 * replace the message header and thus the header is not set.
 *
 * @generated from message device.DeviceRequestMessageHeaderV1
 */
export const DeviceRequestMessageHeaderV1 = /*@__PURE__*/ proto3.makeMessageType(
  "device.DeviceRequestMessageHeaderV1",
  () => [
    { no: 1, name: "device_identifier", kind: "message", T: DeviceIdentifier, opt: true },
    { no: 2, name: "req_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 3, name: "trace_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * *
 * Response message header for use in device response messages.
 *
 * The device response header is set depending on the underlying
 * transport or storage protocol. For example, when this message
 * is sent via MQTT, the MQTT topic is structured in a way to
 * replace the message header and thus the header is not set.
 *
 * @generated from message device.DeviceResponseMessageHeaderV1
 */
export const DeviceResponseMessageHeaderV1 = /*@__PURE__*/ proto3.makeMessageType(
  "device.DeviceResponseMessageHeaderV1",
  () => [
    { no: 1, name: "device_identifier", kind: "message", T: DeviceIdentifier, opt: true },
    { no: 2, name: "req_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 3, name: "trace_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * *
 * Message header for use in standard device messages. Standard
 * messages are stand-alone. In contrast to a request / response
 * scheme, no message is returned for a standard message as response
 * by the peer.
 *
 * @generated from message device.DeviceMessageHeaderV1
 */
export const DeviceMessageHeaderV1 = /*@__PURE__*/ proto3.makeMessageType(
  "device.DeviceMessageHeaderV1",
  () => [
    { no: 1, name: "device_identifier", kind: "message", T: DeviceIdentifier, opt: true },
    { no: 2, name: "trace_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * *
 * Payload of an error response. The payload transports details
 * of the error that occurred.
 *
 * @generated from message device.DeviceErrorResponsePayloadV1
 */
export const DeviceErrorResponsePayloadV1 = /*@__PURE__*/ proto3.makeMessageType(
  "device.DeviceErrorResponsePayloadV1",
  () => [
    { no: 1, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * *
 *
 * Topic for messages from a device to the cloud:
 * {deviceTypeId}/{productCode}/{deviceId}/d(evice)e(rror)/(v)1 "1/3/3-2USU/de/1"
 *
 * Topic for messages from the cloud to a device:
 * {deviceTypeId}/{productCode}/{deviceId}/b(ackend)e(rror)/(v)1 "1/3/3-2USU/be/1"
 *
 * Generic error response message that may be sent for any
 * request. The source can be either a device or the cloud.
 *
 * __Example:__
 * ```yaml
 * {
 *   message_type: 16
 *   header: {
 *     req_id: 1234
 *   }
 *   payload: {
 *     code: 413
 *     id: d76bf96a-60e8-4815-8a93-3b45420eca03
 *     message: Too many requests
 *   }
 * }
 * ```
 *
 * @generated from message device.DeviceErrorResponseMessageV1
 */
export const DeviceErrorResponseMessageV1 = /*@__PURE__*/ proto3.makeMessageType(
  "device.DeviceErrorResponseMessageV1",
  () => [
    { no: 1, name: "message_type", kind: "enum", T: proto3.getEnumType(DeviceMessageTypeV1), opt: true },
    { no: 2, name: "header", kind: "message", T: DeviceResponseMessageHeaderV1, opt: true },
    { no: 3, name: "payload", kind: "message", T: DeviceErrorResponsePayloadV1 },
  ],
);

/**
 * *
 * __Topic:__ {deviceTypeId}/{productCode}/{deviceId}/c(ommand)/(v)1
 *
 * __Example:__ "1/3/3-2USU/c/1"
 *
 * The gateway command request message is sent from the cloud
 * to the gateway. It may be bound for the gateway itself or
 * for the gateway to apply the command to an individual
 * device as specified in `target`.
 *
 * Possible responses:
 * - DeviceGatewayCommandResponseMessageV1
 * - DeviceErrorResponseMessageV1
 *
 * Expected message interval: 3-5 days
 *
 *
 * @generated from message device.DeviceGatewayCommandRequestMessageV1
 */
export const DeviceGatewayCommandRequestMessageV1 = /*@__PURE__*/ proto3.makeMessageType(
  "device.DeviceGatewayCommandRequestMessageV1",
  () => [
    { no: 1, name: "message_type", kind: "enum", T: proto3.getEnumType(DeviceMessageTypeV1), opt: true },
    { no: 2, name: "header", kind: "message", T: DeviceRequestMessageHeaderV1, opt: true },
    { no: 3, name: "target", kind: "message", T: DeviceIdentifier },
    { no: 4, name: "command", kind: "enum", T: proto3.getEnumType(DeviceCommandV1) },
  ],
);

/**
 * *
 * __Topic:__ {deviceTypeId}/{productCode}/{deviceId}/c(ommand)r(esponse)/(v)1
 *
 * __Example:__ "1/3/3-2USU/cr/1"
 *
 * @generated from message device.DeviceGatewayCommandResponseMessageV1
 */
export const DeviceGatewayCommandResponseMessageV1 = /*@__PURE__*/ proto3.makeMessageType(
  "device.DeviceGatewayCommandResponseMessageV1",
  () => [
    { no: 1, name: "message_type", kind: "enum", T: proto3.getEnumType(DeviceMessageTypeV1), opt: true },
    { no: 2, name: "header", kind: "message", T: DeviceResponseMessageHeaderV1, opt: true },
  ],
);

/**
 * *
 * The inverter data payload holds a measurement
 * for a specific inverter.
 *
 * __Example:__
 * ```yaml
 * {
 *    product_code: 2,
 *    serial_number: 1234
 *    wh: 1952
 * }
 * ```
 *
 * @generated from message device.DeviceInverterDataPayloadV1
 */
export const DeviceInverterDataPayloadV1 = /*@__PURE__*/ proto3.makeMessageType(
  "device.DeviceInverterDataPayloadV1",
  () => [
    { no: 1, name: "product_code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "serial_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "wh", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * *
 * __Topic:__ {deviceTypeId}/{productCode}/{deviceId}/d(ata)/(v)1
 *
 * __Example:__ "1/3/3-2USU/d/1"
 *
 * The gateway data message is sent periodically to provide energy
 * data to the backend infrastructure.
 *
 * Expected message interval: 5 minutes
 *
 * __Example:__
 * ```yaml
 * {
 *   message_type: 5,
 *   header: {
 *     product_code: 3,
 *     serial_number: 110033
 *   }
 *   timestamp: 1708462610192
 *   inverter_payload: [
 *     {
 *       product_code: 2,
 *       serial_number: 1234
 *       wh: 1952
 *     },
 *     {
 *       product_code: 2,
 *       serial_number: 1235
 *       wh: 1984
 *     }
 *   ]
 * }
 * ```
 *
 * @generated from message device.DeviceGatewayDataMessageV1
 */
export const DeviceGatewayDataMessageV1 = /*@__PURE__*/ proto3.makeMessageType(
  "device.DeviceGatewayDataMessageV1",
  () => [
    { no: 1, name: "message_type", kind: "enum", T: proto3.getEnumType(DeviceMessageTypeV1), opt: true },
    { no: 2, name: "header", kind: "message", T: DeviceMessageHeaderV1, opt: true },
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "inverter_payloads", kind: "message", T: DeviceInverterDataPayloadV1, repeated: true },
  ],
);

/**
 * *
 * The inverter live data payload holds a single
 * watt measurement as of when the message was sent.
 *
 * __Example:__
 * ```yaml
 * {
 *    product_code: 2,
 *    serial_number: 1234,
 *    w: 133.1
 * }
 * ```
 *
 * @generated from message device.DeviceInverterLiveDataPayloadV1
 */
export const DeviceInverterLiveDataPayloadV1 = /*@__PURE__*/ proto3.makeMessageType(
  "device.DeviceInverterLiveDataPayloadV1",
  () => [
    { no: 1, name: "product_code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "serial_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "w", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ],
);

/**
 * *
 * __Topic:__ {deviceTypeId}/{productCode}/{deviceId}/l(ive)d(ata)/(v)1
 *
 * __Example:__ "1/3/3-2USU/ld/1"
 *
 * The gateway live data message is sent in short intervals
 * to the backend infrastucture to be show the live state.
 *
 * Expected message interval: 5 seconds (if turned on)
 *
 * __Example:__
 * ```yaml
 * {
 *   message_type: 6
 *   header: {
 *     product_code: 3,
 *     serial_number: 110033
 *   }
 *   inverter_payload: [
 *     {
 *       product_code: 2,
 *       serial_number: 1234,
 *       w = 133.1
 *     },
 *     {
 *       product_code: 2,
 *       serial_number: 1235,
 *       w = 152.42
 *     }
 *   ]
 * }
 * ```
 *
 * @generated from message device.DeviceGatewayLiveDataMessageV1
 */
export const DeviceGatewayLiveDataMessageV1 = /*@__PURE__*/ proto3.makeMessageType(
  "device.DeviceGatewayLiveDataMessageV1",
  () => [
    { no: 1, name: "message_type", kind: "enum", T: proto3.getEnumType(DeviceMessageTypeV1), opt: true },
    { no: 2, name: "header", kind: "message", T: DeviceMessageHeaderV1, opt: true },
    { no: 3, name: "inverter_payloads", kind: "message", T: DeviceInverterLiveDataPayloadV1, repeated: true },
  ],
);

/**
 * *
 * The inverter debug data payload holds verbose
 * inverter measurements.
 *
 * __Example:__
 * ```yaml
 * {
 *    product_code: 2,
 *    serial_number: 1234
 *    timestamp: 1708462610194,
 *    dca: 1952,
 *    dcv: 2423,
 *    ...
 * }
 * ```
 * ### Bitmask:
 * - 0: TODO
 * - 1: TODO
 * - 2: TODO
 * - 3: TODO
 * - 4: TODO
 * - 5: TODO
 * - 6: Network state. 0=ok, 1=critical
 * - 7: TODO
 * - 8: DC voltage. 0=DC voltage is out of specification, 1=ok
 * - 9: Boost voltage. 0=Boost voltage is out of specification, 1=ok
 * - 10: Ramp-up time. 0=not passed, 1=ok
 * - 11: Net synchronization. 0=disconnected from grid because grid
 *     frequency or grid voltage was out of specification, 1=ok
 * - 12: Bias voltage. 0=critical, 1=ok
 * - 13: Phase. 0=critical, 1=ok
 * - 14: AC frequency. 0=grid frequency out of specification, 1=ok
 * - 15: AC voltage. 0=grid voltage out of specification, 1=ok
 *
 * @generated from message device.DeviceInverterDebugDataPayloadV1
 */
export const DeviceInverterDebugDataPayloadV1 = /*@__PURE__*/ proto3.makeMessageType(
  "device.DeviceInverterDebugDataPayloadV1",
  () => [
    { no: 1, name: "product_code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "serial_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "dca", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "dcv", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "fgrid", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "iline", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "status", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "uptime", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "tramp", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "vbias", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "vref", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "phvpha", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "spare1", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 14, name: "spare2", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 15, name: "trecl", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 16, name: "tmpot", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 17, name: "w", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 18, name: "wh", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * *
 * The gateway debug data payload holds verbose
 * gateway information.
 *
 * __Example:__
 * ```yaml
 * {
 *    uptime: 9842729,
 *    temperature: 35.2,
 *    ram: 242398,
 *    ...
 * }
 * ```
 *
 * @generated from message device.DeviceGatewayDebugDataPayloadV1
 */
export const DeviceGatewayDebugDataPayloadV1 = /*@__PURE__*/ proto3.makeMessageType(
  "device.DeviceGatewayDebugDataPayloadV1",
  () => [
    { no: 1, name: "uptime", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "temperature", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "ram", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "reboot", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "ssid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "bssid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "rssi", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 9, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "subnet", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "gateway", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * *
 * __Topic:__ {deviceTypeId}/{productCode}/{deviceId}/d(ebug)d(ata)/(v)1
 *
 * __Example:__ "1/3/3-2USU/dd/1"
 *
 * The gateway debug data message is sent periodically from the
 * gateway to the backend to provide verbose measurement data for
 * an analysis.
 *
 * Expected message interval: 1 minute
 *
 * __Example:__
 * ```yaml
 * {
 *   message_type: 6
 *   header: {
 *     product_code: 3
 *     serial_number: 110033
 *   }
 *   timestamp: 1708462610194
 *   inverter_payload: [
 *     {
 *       product_code: 2,
 *       serial_number: 1234
 *       dca: 1952,
 *       dcv: 2423,
 *       ...
 *     },
 *     {
 *       product_code: 2,
 *       serial_number: 1235
 *       dca: 1941,
 *       dcv: 2484,
 *       ...
 *     }
 *   ]
 * }
 * ```
 *
 * @generated from message device.DeviceInverterDebugDataMessageV1
 */
export const DeviceInverterDebugDataMessageV1 = /*@__PURE__*/ proto3.makeMessageType(
  "device.DeviceInverterDebugDataMessageV1",
  () => [
    { no: 1, name: "message_type", kind: "enum", T: proto3.getEnumType(DeviceMessageTypeV1), opt: true },
    { no: 2, name: "header", kind: "message", T: DeviceMessageHeaderV1, opt: true },
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "gateway_payload", kind: "message", T: DeviceGatewayDebugDataPayloadV1, opt: true },
    { no: 5, name: "inverter_payloads", kind: "message", T: DeviceInverterDebugDataPayloadV1, repeated: true },
  ],
);

